version: '3.7'

services:

  coredns:
    build:
      context: ./CoreDNS
      dockerfile: Dockerfile.local
    container_name: coredns
    restart: unless-stopped
    ports:
      - "53:53/udp"
      - "53:53/tcp"

  postgres:
    container_name: postgres
    build:
      context: ./Database/postgres
      dockerfile: Dockerfile.local
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=selfimprovement123
      - POSTGRES_DB=SelfImprovementDb
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    logging:
      options:
        max-size: 10m
        max-file: "3"

  pgadmin:
    container_name: pgadmin
    build:
      context: ./Database/pgadmin
      dockerfile: Dockerfile.local
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@selfimprovement.ai
      - PGADMIN_DEFAULT_PASSWORD=selfimprovement123
    ports:
      - "5050:80"
    volumes:
      - ./Database/Lib/config.py:/pgadmin4/web/config_local.py

  # frontend:
  #   container_name: selfimprovement-frontend
  #   build:
  #     context: ./Source/Web/
  #     dockerfile: Dockerfile.local
  #   ports:
  #     - "3000:3000"
  #   restart: always

  identity:
    container_name: selfimprovement-identity
    restart: always
    build:
      context: ./Source
      dockerfile: IdentityApi/Dockerfile.local
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=SelfImprovementDb;User ID=admin;Password=selfimprovement123;Include Error Detail=true
      - CorsOrigin=http://localhost:3000
      - BlobStorageConnectionUrl=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://azurite
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M

  goal:
    container_name: selfimprovement-goal
    build:
      context: ./Source
      dockerfile: GoalApi/Dockerfile.local
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=SelfImprovementDb;User ID=admin;Password=selfimprovement123;Include Error Detail=true
      - CorsOrigin=http://localhost:3000
      - RabbitMqConnectionUrl=amqp://guest:guest@host.docker.internal:5672/
    ports:
      - "8081:8080"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    restart: always

  prompt:
    container_name: selfimprovement-prompt
    build:
      context: ./Source
      dockerfile: PromptApi/Dockerfile.local
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=SelfImprovementDb;User ID=admin;Password=selfimprovement123;Include Error Detail=true
      - CorsOrigin=http://localhost:3000
      - RabbitMqConnectionUrl=amqp://guest:guest@host.docker.internal:5672/
      - BlobStorageConnectionUrl=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://azurite
      - Llama2=host.docker.internal:11434
      - Gpt35=api.openai.com
      - Gpt35_ApiKey=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
      - GoalApiServiceUrl=host.docker.internal:8081
      - IdentityApiServiceUrl=host.docker.internal:8080

    ports:
      - "8082:8080"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M

  open-webui:
    container_name: open-webui
    restart: always
    build:
      context: ./Ollama/webui
      dockerfile: Dockerfile.local
    ports:
      - "3001:8080"
    volumes:
      - open-webui:/app/backend/data

  ollama:
    container_name: ollama
    build:
      context: ./Ollama
      dockerfile: Dockerfile.local
    tty: true
    volumes:
      - ollama:/root/.ollama
    restart: always
    ports:
      - 11434:11434
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite"
    hostname: azurite
    volumes:
      - azurite_data:/data
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    command: "azurite-blob --blobHost 0.0.0.0 -l /data"

  mailhog:
    container_name: mailhog
    restart: always
    build:
      context: ./Mail
      dockerfile: Dockerfile
    ports:
      - "1025:1025"
      - "8025:8025"

  grafana:
    container_name: grafana
    build:
      context: ./Monitoring/Grafana
      dockerfile: Dockerfile.local
    restart: always
    volumes:
      - ./Monitoring/Grafana/lib:/var/lib/grafana
    ports:
      - "3002:3000"
    user: "${UID}:${GID}"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  loki:
    container_name: loki
    build:
      context: ./Monitoring/Loki
      dockerfile: Dockerfile.local
    restart: always
    volumes:
      - ./Monitoring/Loki:/etc/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml

  promtail:
    container_name: promtail
    build:
      context: ./Monitoring/Promtail
      dockerfile: Dockerfile.local
    restart: always
    volumes:
      - /var/log:/var/log
    command:
      - -config.expand-env=true
      - -config.file=/etc/promtail/config.yml

  prometheus:
    container_name: prometheus
    build:
      context: ./Monitoring/Prometheus
      dockerfile: Dockerfile.local
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./Monitoring/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.external-url=http://localhost:80/prometheus/

  node-exporter:
    container_name: node-exporter
    build:
      context: ./Monitoring/NodeExporter
      dockerfile: Dockerfile.local
    restart: always
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'

  rabbitmq:
    container_name: rabbitmq
    build:
      context: ./Rabbitmq
      dockerfile: Dockerfile.local
    restart: always
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management Plugin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # nginx:
  #   container_name: nginx
  #   build:
  #     context: ./Nginx
  #     dockerfile: Dockerfile.local
  #   restart: always
  #   ports:
  #     - "80:80"
  #     #- "443:443"
  #   volumes:
  #     - ./Nginx/nginx.conf:/etc/nginx/nginx.conf
  #   # env_file:
  #   #   - .env

volumes:
  azurite_data:
  postgres:
  ollama:
  prometheus_data:
  open-webui:
  rabbitmq_data:
