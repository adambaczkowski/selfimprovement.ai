version: '3.7'

services:
  rabbitmq:
    container_name: rabbitmq
    build:
      context: ./Rabbitmq
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/rabbitmq:${IMAGE_TAG}"
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management Plugin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia/

  # postgres:
  #   container_name: postgres
  #   build:
  #     context: ./Database/postgres
  #     dockerfile: Dockerfile.local
  #   image: "${ACR_NAME}.azurecr.io/postgres:${IMAGE_TAG}"
  #   restart: on-failure
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB_NAME}
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - postgres:/var/lib/postgresql/data
  #   logging:
  #     options:
  #       max-size: 10m
  #       max-file: "3"

  frontend:
    container_name: selfimprovement-frontend
    build:
      context: ./Source/Web/
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-frontend:${IMAGE_TAG}"
    ports:
      - "3000:3000"
    restart: always

  identity:
    container_name: selfimprovement-identity
    build:
      context: ./Source
      dockerfile: IdentityApi/Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-identity:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=${POSTGRES_DB_NAME};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
    ports:
      - "8080:8080"
    restart: on-failure

  goal:
    container_name: selfimprovement-goal
    build:
      context: ./Source
      dockerfile: GoalApi/Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-goal:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=${POSTGRES_DB_NAME};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
    ports:
      - "8080:8080"
    restart: always

  prompt:
    container_name: selfimprovement-prompt
    build:
      context: ./Source
      dockerfile: PromptApi/Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-prompt:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=${POSTGRES_DB_NAME};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
      - BlobStorageConnectionUrl=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=https://selfimprovementstorage.file.core.windows.net/prompt
      - Llama2=ollama-static-dns.polandcentral.azurecontainer.io:11434
      - GoalApiServiceUrl=goal-static-dns.polandcentral.azurecontainer.io:8080
      - IdentityApiServiceUrl=identity-static-dns.polandcentral.azurecontainer.io:8080
    ports:
      - "8080:8080"
    restart: always

  pgadmin:
    container_name: pgadmin
    build:
      context: ./Database/pgadmin
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/pgadmin:${IMAGE_TAG}"
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "80:80"
    volumes:
      - ./Database/Lib/config.py:/pgadmin4/web/config_local.py

  open-webui:
    container_name: open-webui
    restart: on-failure
    build:
      context: ./Ollama/webui
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/open-webui:${IMAGE_TAG}"
    ports:
      - "8080:8080"
    volumes:
      - open-webui:/app/backend/data

  ollama:
    container_name: ollama
    build:
      context: ./Ollama
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/ollama:${IMAGE_TAG}"
    tty: true
    volumes:
      - ollama:/root/.ollama
    restart: unless-stopped
    ports:
      - 11434:11434
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  grafana:
    container_name: grafana
    build:
      context: ./Monitoring/Grafana
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/grafana:${IMAGE_TAG}"
    restart: on-failure
    user: "1000"
    volumes:
      - ./Monitoring/Grafana/lib:/var/lib/grafana
    ports:
      - "3000:3000"

  loki:
    container_name: loki
    build:
      context: ./Monitoring/Loki
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/loki:${IMAGE_TAG}"
    restart: on-failure
    volumes:
      - ./Monitoring/Loki:/etc/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml

  promtail:
    container_name: promtail
    build:
      context: ./Monitoring/Promtail
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/promtail:${IMAGE_TAG}"
    restart: on-failure
    volumes:
      - ./Monitoring/Promtail:/etc/promtail
    command: -config.expand-env=true -config.file=/etc/promtail/promtail-config.yml

  prometheus:
    container_name: prometheus
    build:
      context: ./Monitoring/Prometheus
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/prometheus:${IMAGE_TAG}"
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./Monitoring/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.external-url=http://0.0.0.0:80/prometheus/

  node-exporter:
    container_name: node-exporter
    build:
      context: ./Monitoring/NodeExporter
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/node-exporter:${IMAGE_TAG}"
    restart: on-failure
    ports:
      - "9100:9100"

  nginx:
    container_name: nginx
    build:
      context: ./Nginx
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/nginx:${IMAGE_TAG}"
    restart: unless-stopped
    ports:
      - "80:80"
      #- "443:443"
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/nginx.conf
      #- ./Nginx/index.html:/usr/share/nginx/html/index.html
    # env_file:
    #   - .env

volumes:
  #postgres:
  ollama:
  prometheus_data:
  open-webui:
  rabbitmq_data: