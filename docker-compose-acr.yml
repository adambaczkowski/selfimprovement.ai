version: '3.7'

services:
  rabbitmq:
    container_name: rabbitmq
    build:
      context: ./Rabbitmq
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/rabbitmq:${IMAGE_TAG}"
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management Plugin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia/

  open-webui:
    container_name: open-webui
    restart: always
    build:
      context: ./Ollama/webui
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/open-webui:${IMAGE_TAG}"
    ports:
      - "8080:8080"
    volumes:
      - open_webui_data:/app/backend/data

  ollama:
    container_name: ollama
    build:
      context: ./Ollama
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/ollama:${IMAGE_TAG}"
    tty: true
    volumes:
      - ollama_data:/root/.ollama
    restart: always
    ports:
      - 11434:11434

  grafana:
    container_name: grafana
    build:
      context: ./Monitoring/Grafana
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/grafana:${IMAGE_TAG}"
    restart: always
    volumes:
      - ./Monitoring/Grafana/lib:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}

  loki:
    container_name: loki
    build:
      context: ./Monitoring/Loki
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/loki:${IMAGE_TAG}"
    restart: always
    volumes:
      - ./Monitoring/Loki:/etc/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml

  promtail:
    container_name: promtail
    build:
      context: ./Monitoring/Promtail
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/promtail:${IMAGE_TAG}"
    restart: always
    volumes:
      - promtail_data:/etc/promtail
    command: -config.expand-env=true -config.file=/etc/promtail/promtail-config.yml

  prometheus:
    container_name: prometheus
    build:
      context: ./Monitoring/Prometheus
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/prometheus:${IMAGE_TAG}"
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./Monitoring/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.external-url=http://0.0.0.0:80/prometheus/

  node-exporter:
    container_name: node-exporter
    build:
      context: ./Monitoring/NodeExporter
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/node-exporter:${IMAGE_TAG}"
    restart: always
    ports:
      - "9100:9100"

  frontend:
    container_name: selfimprovement-frontend
    build:
      context: ./Source/Web/
      dockerfile: Dockerfile.acr
    image: "${ACR_NAME}.azurecr.io/selfimprovement-frontend:${IMAGE_TAG}"
    ports:
      - "80:80"
    restart: always

  identity:
    container_name: selfimprovement-identity
    build:
      context: ./Source
      dockerfile: IdentityApi/Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-identity:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=selfimprovementaipsql.postgres.database.azure.com;Port=5432;Database=SelfImprovementDb;User ID=selfimprovementAdmin@selfimprovementaipsql;Password=selfimprovement123$$;Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
    ports:
      - "8080:8080"
    restart: always

  goal:
    container_name: selfimprovement-goal
    build:
      context: ./Source
      dockerfile: GoalApi/Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-goal:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=selfimprovementaipsql.postgres.database.azure.com;Port=5432;Database=SelfImprovementDb;User ID=selfimprovementAdmin@selfimprovementaipsql;Password=selfimprovement123$$;Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
    ports:
      - "8080:8080"
    restart: always

  prompt:
    container_name: selfimproved-prompt
    build:
      context: ./Source
      dockerfile: PromptApi/Dockerfile.acr
    image: "${ACR_NAME}.azurecr.io/selfimprovement-prompt:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=selfimprovementaipsql.postgres.database.azure.com;Port=5432;Database=SelfImprovementDb;User ID=selfimprovementAdmin@selfimprovementaipsql;Password=selfimprovement123$$;Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
      - BlobStorageConnectionUrl=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=https://selfimprovementstorage.blob.core.windows.net/blob
      - Llama2=ollama-static-dns.polandcentral.azurecontainer.io:11434
      - GoalApiServiceUrl=goal-static-dns.polandcentral.azurecontainer.io:8080
      - IdentityApiServiceUrl=identity-static-dns.polandcentral.azurecontainer.io:8080
    ports:
      - "8080:8080"
    restart: always

    nginx:
      container_name: nginx
      build:
        context: ./Nginx
        dockerfile: Dockerfile.local
      image: "${ACR_NAME}.azurecr.io/nginx:${IMAGE_TAG}"
      restart: always
      ports:
        - "80:80"
      volumes:
        - ./Nginx/acr_conf/nginx.conf:/etc/nginx/nginx.conf
        - nginx_data:/etc/nginx

volumes:
  rabbitmq_data:
    driver: azure_file
    driver_opts:
      share_name: "rabbitmq"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  pgadmin_data:
    driver: azure_file
    driver_opts:
      share_name: "pgadmin"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  open_webui_data:
    driver: azure_file
    driver_opts:
      share_name: "openwebui"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  ollama_data:
    driver: azure_file
    driver_opts:
      share_name: "ollama"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  grafana_data:
    driver: azure_file
    driver_opts:
      share_name: "grafana"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  loki_data:
    driver: azure_file
    driver_opts:
      share_name: "lokidata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  promtail_data:
    driver: azure_file
    driver_opts:
      share_name: "promtail"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  prometheus_data:
    driver: azure_file
    driver_opts:
      share_name: "prometheus"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  nginx_data:
    driver: azure_file
    driver_opts:
      share_name: "nginx"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"
