version: '3.7'

services:
  coredns:
    container_name: coredns
    build:
      context: ./CoreDNS
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/coredns:${IMAGE_TAG}"
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    restart: always
    volumes:
      - coredns_data:/data

  rabbitmq:
    container_name: rabbitmq
    build:
      context: ./Rabbitmq
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/rabbitmq:${IMAGE_TAG}"
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management Plugin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia/

  frontend:
    container_name: selfimprovement-frontend
    build:
      context: ./Source/Web/
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-frontend:${IMAGE_TAG}"
    ports:
      - "3000:3000"
    restart: always

  identity:
    container_name: selfimprovement-identity
    build:
      context: ./Source
      dockerfile: IdentityApi/Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-identity:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=${POSTGRES_DB_NAME};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
    ports:
      - "8080:8080"
    restart: always

  goal:
    container_name: selfimprovement-goal
    build:
      context: ./Source
      dockerfile: GoalApi/Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-goal:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=${POSTGRES_DB_NAME};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
    ports:
      - "8080:8080"
    restart: always

  prompt:
    container_name: selfimproved-prompt
    build:
      context: ./Source
      dockerfile: PromptApi/Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/selfimprovement-prompt:${IMAGE_TAG}"
    environment:
      - SelfImprovementDbContext=Host=postgres;Port=5432;Database=${POSTGRES_DB_NAME};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true
      - CorsOrigin=http://frontend-static-dns.polandcentral.azurecontainer.io:3000
      - RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/
      - BlobStorageConnectionUrl=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=https://selfimprovementstorage.blob.core.windows.net/blob
      - Llama2=ollama-static-dns.polandcentral.azurecontainer.io:11434
      - GoalApiServiceUrl=goal-static-dns.polandcentral.azurecontainer.io:8080
      - IdentityApiServiceUrl=identity-static-dns.polandcentral.azurecontainer.io:8080
    ports:
      - "8080:8080"
    restart: always

  pgadmin:
    container_name: pgadmin
    build:
      context: ./Database/pgadmin
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/pgadmin:${IMAGE_TAG}"
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "80:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin


  open-webui:
    container_name: open-webui
    restart: always
    build:
      context: ./Ollama/webui
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/open-webui:${IMAGE_TAG}"
    ports:
      - "8080:8080"
    volumes:
      - open-webui:/app/backend/data

  ollama:
    container_name: ollama
    build:
      context: ./Ollama
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/ollama:${IMAGE_TAG}"
    tty: true
    volumes:
      - ollama:/root/.ollama
    restart: always
    ports:
      - 11434:11434
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  grafana:
    container_name: grafana
    build:
      context: ./Monitoring/Grafana
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/grafana:${IMAGE_TAG}"
    restart: always
    volumes:
      - ./Monitoring/Grafana/lib:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}

  loki:
    container_name: loki
    build:
      context: ./Monitoring/Loki
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/loki:${IMAGE_TAG}"
    restart: always
    volumes:
      - loki_data:/etc/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml

  promtail:
    container_name: promtail
    build:
      context: ./Monitoring/Promtail
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/promtail:${IMAGE_TAG}"
    restart: always
    volumes:
      - promtail_data:/etc/promtail
    command: -config.expand-env=true -config.file=/etc/promtail/promtail-config.yml

  prometheus:
    container_name: prometheus
    build:
      context: ./Monitoring/Prometheus
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/prometheus:${IMAGE_TAG}"
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.external-url=http://0.0.0.0:80/prometheus/

  node-exporter:
    container_name: node-exporter
    build:
      context: ./Monitoring/NodeExporter
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/node-exporter:${IMAGE_TAG}"
    restart: always
    ports:
      - "9100:9100"

  nginx:
    container_name: nginx
    build:
      context: ./Nginx
      dockerfile: Dockerfile.local
    image: "${ACR_NAME}.azurecr.io/nginx:${IMAGE_TAG}"
    restart: always
    ports:
      - "80:80"
      #- "443:443"
    volumes:
      - nginx_data:/etc/nginx
      #- ./Nginx/index.html:/usr/share/nginx/html/index.html
    # env_file:
    #   - .env

volumes:
  coredns_data:
    driver: azure_file
    driver_opts:
      share_name: "corednsdata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  rabbitmq_data:
    driver: azure_file
    driver_opts:
      share_name: "rabbitmqdata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  pgadmin_data:
    driver: azure_file
    driver_opts:
      share_name: "pgadmindata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  open_webui_data:
    driver: azure_file
    driver_opts:
      share_name: "openwebuidata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  ollama_data:
    driver: azure_file
    driver_opts:
      share_name: "ollamadata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  grafana_data:
    driver: azure_file
    driver_opts:
      share_name: "grafanadata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  loki_data:
    driver: azure_file
    driver_opts:
      share_name: "lokidata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  promtail_data:
    driver: azure_file
    driver.opts:
      share_name: "promtaildata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  prometheus_data:
    driver: azure_file
    driver_opts:
      share_name: "prometheusdata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"

  nginx_data:
    driver: azure_file
    driver_opts:
      share_name: "nginxdata"
      storage_account_name: "${STORAGE_ACCOUNT_NAME}"
      storage_account_key: "${STORAGE_ACCOUNT_KEY}"


networks:
  default:
    external:
      name: dev-vnet