name: ðŸ”¨ Deploy Infrastructure with Terraform to Azure

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  login_to_azure:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  create_resources:
    runs-on: ubuntu-latest
    needs: login_to_azure
    steps:
      - name: Create Resource Group
        run: |
          az group create --name ${{ secrets.RESOURCE_GROUP_NAME }} --location ${{ secrets.LOCATION }}

      - name: Create Storage Account
        run: |
          az storage account create --name ${{ secrets.STORAGE_ACCOUNT_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --location ${{ secrets.LOCATION }} --sku Standard_LRS --kind StorageV2

      - name: Create tfstate container
        run: |
          accountKey=$(az storage account keys list --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --query '[0].value' -o tsv)
          az storage container create --name ${{ secrets.CONTAINER_NAME }} --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --account-key $accountKey

  setup_terraform:
    runs-on: ubuntu-latest
    needs: create_resources
    steps:
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Generate SSH Key
        run: |
          mkdir -p .ssh
          ssh-keygen -t rsa -b 4096 -N "${{ secrets.SSH_PASSWORD }}" -C "${{ secrets.SSH_USER }}" -q -f .ssh/id_rsa
          sshKey=$(cat .ssh/id_rsa.pub)
          echo "arm_ssh_key=\"$sshKey\"" > ./terraform/terraform.tfvars

  generate_secrets:
    runs-on: ubuntu-latest
    needs: setup_terraform
    steps:
      - name: Generate .tfvars file
        run: |
          echo "arm_subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"" >> ./terraform/terraform.tfvars
          echo "arm_tenant_id       = \"${{ secrets.AZURE_TENANT_ID }}\""       >> ./terraform/terraform.tfvars
          echo "arm_client_id       = \"${{ secrets.AZURE_CLIENT_ID }}\""       >> ./terraform/terraform.tfvars
          echo "arm_client_secret   = \"${{ secrets.AZURE_CLIENT_SECRET }}\""   >> ./terraform/terraform.tfvars

      - name: Generate postgres password
        run: |
          postgres_secret=$(openssl rand -hex 16 | awk '{ for(i=1; i<=length($0); i++) printf "%s", (rand() > 0.5 ? toupper(substr($0, i, 1)) : tolower(substr($0, i, 1))); print "" }')
          echo "postgres_password=\"${postgres_secret}\"" >> ./terraform/terraform.tfvars

      - name: Generate pg admin password
        run: |
          pg_admin_secret=$(openssl rand -hex 24)
          echo "pgadmin_password=\"${pg_admin_secret}\"" >> ./terraform/terraform.tfvars

      - name: Generate rabbitmq user
        run: |
          rabbitmq_user=$(openssl rand -hex 24)
          echo "rabbitmq_user=\"${rabbitmq_user}\"" >> ./terraform/terraform.tfvars

      - name: Generate rabbitmq password
        run: |
          rabbitmq_password=$(openssl rand -hex 24)
          echo "rabbitmq_password=\"${rabbitmq_password}\"" >> ./terraform/terraform.tfvars

      - name: Generate grafana user
        run: |
          grafana_user=$(openssl rand -hex 24)
          echo "grafana_user=\"${grafana_user}\"" >> ./terraform/terraform.tfvars

      - name: Generate grafana password
        run: |
          grafana_password=$(openssl rand -hex 24)
          echo "grafana_password=\"${grafana_password}\"" >> ./terraform/terraform.tfvars

  configure_backend:
    runs-on: ubuntu-latest
    needs: generate_secrets
    steps:
      - name: Configure Terraform Backend
        run: |
          storage_key=$(az storage account keys list --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --query '[0].value' --output tsv)
          terraform init -backend-config="storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.CONTAINER_NAME }}" -backend-config="key=terraform.tfstate" -backend-config="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" -backend-config="access_key=$storage_key"
        working-directory: ./terraform

  terraform_operations:
    runs-on: ubuntu-latest
    needs: configure_backend
    steps:
      - name: Terraform Format
        run: terraform fmt
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=main.tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve main.tfplan
        working-directory: ./terraform
