name: 🐳🚀 Create Docker Infrastructure

on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Retrieve secrets from Azure Key Vault
        run: |
          rabbitmqUser=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name rabbitmqUser --query value -o tsv)
          rabbitmqPassword=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name rabbitmqPassword --query value -o tsv)
          grafanaUser=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name grafanaUser --query value -o tsv)
          grafanaPassword=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name grafanaPassword --query value -o tsv)
          echo "RABBITMQ_USER=\"$rabbitmqUser\"" >> .env
          echo "RABBITMQ_PASSWORD=\"$rabbitmqPassword\"" >> .env
          echo "GRAFANA_USER=\"$grafanaUser\"" >> .env
          echo "GRAFANA_PASSWORD=\"$grafanaPassword\"" >> .env

      - name: Deploy RabbitMQ to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository rabbitmq --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name rabbitmq \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/rabbitmq:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 5672 15672 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label rabbitmq-static-dns \
            --location ${{ secrets.LOCATION }} \
            --azure-file-volume-share-name rabbitmq \
            --azure-file-volume-account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} \
            --azure-file-volume-account-key ${{ secrets.STORAGE_KEY }} \
            --azure-file-volume-mount-path /var/lib/rabbitmq/mnesia \
            --environment-variables \
                RABBITMQ_DEFAULT_USER=${{ env.RABBITMQ_USER }} \
                RABBITMQ_DEFAULT_PASS=${{ env.RABBITMQ_PASSWORD }} \
                RABBITMQ_NODENAME=rabbit@localhost \
                RABBITMQ_USE_LONGNAME=true

      - name: Deploy Ollama to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository ollama --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name ollama \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/ollama:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 11434 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label ollama-static-dns \
            --location ${{ secrets.LOCATION }} \
            --azure-file-volume-account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} \
            --azure-file-volume-account-key ${{ secrets.STORAGE_KEY }} \
            --azure-file-volume-share-name ollama \
            --azure-file-volume-mount-path /root/.ollama

      - name: Deploy Frontend to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository selfimprovement-frontend --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name frontend \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/selfimprovement-frontend:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 80 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label frontend-static-dns \
            --location ${{ secrets.LOCATION }}

      - name: Deploy Identity to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository selfimprovement-identity --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name identity \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/selfimprovement-identity:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 8080 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label identity-static-dns \
            --location ${{ secrets.LOCATION }} \
            --environment-variables \
                SelfImprovementDbContext="Host=${{ secrets.DB_HOST }}; \
                Port=${{ secrets.DB_PORT }}; \
                Database=${{ secrets.DB_NAME }}; \
                User ID=${{ secrets.DB_USER }}; \
                Password=${{ secrets.DB_PASS }}; \
                Include Error Detail=true" \
                CorsOrigin=http://localhost:3000 \
                RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/

      - name: Add firewall database rule for identity
        continue-on-error: true
        run: |
          # Retrieve the public IP of the ACI
          ACI_IP=$(az container show --resource-group dev-rg --name identity --query ipAddress.ip --output tsv)

          # Update PostgreSQL firewall rule to allow the ACI IP
          az postgres server firewall-rule create \
              --resource-group dev-rg \
              --server selfimprovementaipsql \
              --name AllowIdentity \
              --start-ip-address $ACI_IP \
              --end-ip-address $ACI_IP

      - name: Deploy Goal to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository selfimprovement-goal --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name goal \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/selfimprovement-goal:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 8080 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label goal-static-dns \
            --location ${{ secrets.LOCATION }} \
            --environment-variables \
                SelfImprovementDbContext="Host=${{ secrets.DB_HOST }}; \
                Port=${{ secrets.DB_PORT }}; \
                Database=${{ secrets.DB_NAME }}; \
                User ID=${{ secrets.DB_USER }}; \
                Password=${{ secrets.DB_PASS }}; \
                Include Error Detail=true" \
                CorsOrigin=http://localhost:3000 \
                RabbitMqConnectionUrl=amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/

      - name: Add firewall database rule for goal
        continue-on-error: true
        run: |
          # Retrieve the public IP of the ACI
          ACI_IP=$(az container show --resource-group dev-rg --name goal --query ipAddress.ip --output tsv)

          # Update PostgreSQL firewall rule to allow the ACI IP
          az postgres server firewall-rule create \
              --resource-group dev-rg \
              --server selfimprovementaipsql \
              --name AllowGoal \
              --start-ip-address $ACI_IP \
              --end-ip-address $ACI_IP

      - name: Deploy Prompt to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository selfimprovement-prompt --orderby time_desc --query '[0]' -o tsv)
          echo "Latest tag: ${latest_tag}"
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name prompt \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/selfimprovement-prompt:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 8080 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label prompt-static-dns \
            --location ${{ secrets.LOCATION }} \
            --environment-variables \
                SelfImprovementDbContext="Host=${{ secrets.DB_HOST }}}; \
                Port=${{ secrets.DB_PORT }}; \
                Database=${{ secrets.DB_NAME }}; \
                User ID=${{ secrets.DB_USER }}; \
                Password=${{ secrets.DB_PASS }}; \
                Include Error Detail=true" \
                CorsOrigin="http://localhost:3000" \
                RabbitMqConnectionUrl="amqp://rabbitmq-static-dns.polandcentral.azurecontainer.io:5672/" \
                BlobStorageConnectionUrl="UseDevelopmentStorage=true; \
                DevelopmentStorageProxyUri=https://selfimprovementstorage.blob.core.windows.net/azurite" \
                Llama2="ollama-static-dns.polandcentral.azurecontainer.io:11434" \
                GoalApiServiceUrl="goal-static-dns.polandcentral.azurecontainer.io:8080" \
                IdentityApiServiceUrl="identity-static-dns.polandcentral.azurecontainer.io:8080"

      - name: Add firewall database rule for prompt
        continue-on-error: true
        run: |
          # Retrieve the public IP of the ACI
          ACI_IP=$(az container show --resource-group dev-rg --name prompt --query ipAddress.ip --output tsv)

          # Update PostgreSQL firewall rule to allow the ACI IP
          az postgres server firewall-rule create \
              --resource-group dev-rg \
              --server selfimprovementaipsql \
              --name AllowPrompt \
              --start-ip-address $ACI_IP \
              --end-ip-address $ACI_IP

      - name: Deploy Open WebUI to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository open-webui --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name open-webui \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/open-webui:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 8080 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label open-webui-static-dns \
            --location ${{ secrets.LOCATION }}

      - name: Deploy Grafana to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository grafana --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name grafana \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/grafana:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 3000 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label grafana-static-dns \
            --location ${{ secrets.LOCATION }} \
            --environment-variables \
                GF_SECURITY_ADMIN_USER=${{ secrets.GRAFANA_USER }} \
                GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}

      # - name: Deploy Loki to ACI
      #   continue-on-error: true
      #   run: |
      #     latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository loki --orderby time_desc --query '[0]' -o tsv)
      #     az container create \
      #       --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
      #       --name loki \
      #       --image ${{ secrets.ACR_NAME }}.azurecr.io/loki:${latest_tag} \
      #       --cpu 1 \
      #       --memory 2 \
      #       --ports 3100 \
      #       --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
      #       --registry-username ${{ secrets.ACR_USERNAME }} \
      #       --registry-password ${{ secrets.ACR_PASSWORD }} \
      #       --dns-name-label loki-static-dns \
      #       --location ${{ secrets.LOCATION }}

      # - name: Deploy Promtail to ACI
      #   continue-on-error: true
      #   run: |
      #     latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository promtail --orderby time_desc --query '[0]' -o tsv)
      #     az container create \
      #       --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
      #       --name promtail \
      #       --image ${{ secrets.ACR_NAME }}.azurecr.io/promtail:${latest_tag} \
      #       --cpu 1 \
      #       --memory 2 \
      #       --ports 9080 \
      #       --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
      #       --registry-username ${{ secrets.ACR_USERNAME }} \
      #       --registry-password ${{ secrets.ACR_PASSWORD }} \
      #       --dns-name-label promtail-static-dns \
      #       --location ${{ secrets.LOCATION }}

      - name: Deploy Prometheus to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository prometheus --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name prometheus \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/prometheus:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 9090 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label prometheus-static-dns \
            --location ${{ secrets.LOCATION }}

      # - name: Deploy Node Exporter to ACI
      #   continue-on-error: true
      #   run: |
      #     latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository node-exporter --orderby time_desc --query '[0]' -o tsv)
      #     az container create \
      #       --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
      #       --name node-exporter \
      #       --image ${{ secrets.ACR_NAME }}.azurecr.io/node-exporter:${latest_tag} \
      #       --cpu 1 \
      #       --memory 2 \
      #       --ports 9100 \
      #       --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
      #       --registry-username ${{ secrets.ACR_USERNAME }} \
      #       --registry-password ${{ secrets.ACR_PASSWORD }} \
      #       --dns-name-label node-exporter-static-dns \
      #       --location ${{ secrets.LOCATION }}

      - name: Deploy Nginx to ACI
        continue-on-error: true
        run: |
          latest_tag=$(az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository nginx --orderby time_desc --query '[0]' -o tsv)
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name nginx \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/nginx:${latest_tag} \
            --cpu 1 \
            --memory 2 \
            --ports 80 443 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label nginx-static-dns \
            --location ${{ secrets.LOCATION }}

      - name: Docker logout
        if: always()
        run: docker logout ${{ secrets.ACR_NAME }}.azurecr.io
