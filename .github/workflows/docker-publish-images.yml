name: 🐋 Build and Push Docker Images to Azure Container Registry

on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Retrieve postgresUser from Azure Key Vault
        run: |
          postgresUser=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name postgresUser --query value -o tsv)
          echo "POSTGRES_USER=\"${postgresUser}\"" > .env

      - name: Retrieve postgresPassword from Azure Key Vault
        run: |
          postgresPassword=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name postgresPassword --query value -o tsv)
          echo "POSTGRES_PASSWORD=\"${postgresPassword}\"" >> .env

      - name: Retrieve postgresDbName from Azure Key Vault
        run: |
          postgresDbName=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name postgresDbName --query value -o tsv)
          echo "POSTGRES_DB_NAME=\"${postgresDbName}\"" >> .env

      - name: Retrieve pgAdminEmail from Azure Key Vault
        run: |
          pgAdminEmail=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name pgAdminEmail --query value -o tsv)
          echo "PGADMIN_DEFAULT_EMAIL=\"${pgAdminEmail}\"" >> .env

      - name: Retrieve pgAdminPassword from Azure Key Vault
        run: |
          pgAdminPassword=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name pgAdminPassword --query value -o tsv)
          echo "PGADMIN_DEFAULT_PASSWORD=\"${pgAdminPassword}\"" >> .env

      - name: Retrieve grafanaUser from Azure Key Vault
        run: |
          grafanaUser=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name grafanaUser --query value -o tsv)
          echo "GRAFANA_USER=\"${grafanaUser}\"" >> .env

      - name: Retrieve grafanaPassword from Azure Key Vault
        run: |
          grafanaPassword=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name grafanaPassword --query value -o tsv)
          echo "GRAFANA_PASSWORD=\"${grafanaPassword}\"" >> .env

      - name: Retrieve STORAGE_ACCOUNT_NAME
        run: |
          echo "STORAGE_ACCOUNT_NAME=\"${{ secrets.STORAGE_ACCOUNT_NAME }}\"" >> .env

      - name: Retrieve STORAGE_ACCOUNT_KEY}
        run: |
          echo "STORAGE_ACCOUNT_KEY=\"${{ secrets.STORAGE_KEY }}\"" >> .env

      # - name: Create File Shares for CoreDNS
      #   run: |
      #     az storage share create --name coredns --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}

      - name: Create File Shares for RabbitMq
        run: |
          az storage share create --name rabbitmq --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}


      - name: Create File Shares for openwebui
        run: |
          az storage share create --name openwebui --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}

      - name: Create File Shares for ollama
        run: |
          az storage share create --name ollama --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}

      - name: Create File Shares for grafana
        run: |
          az storage share create --name grafana --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}

      - name: Create File Shares for loki
        run: |
          az storage share create --name loki --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}

      - name: Create File Shares for promtail
        run: |
          az storage share create --name promtail --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}

      - name: Create File Shares for prometheus
        run: |
          az storage share create --name prometheus --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}

      - name: Create File Shares for nginx
        run: |
          az storage share create --name nginx --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }}

      - name: Create blob storage container
        run: |
          az storage container create --name azurite --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.STORAGE_KEY }}

      - name: Build and push Docker images
        env:
          ACR_NAME: ${{ secrets.ACR_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ACR_NAME=${ACR_NAME}" >> .env
          echo "IMAGE_TAG=${IMAGE_TAG}" >> .env
          echo "STORAGE_ACCOUNT_NAME=${{ secrets. STORAGE_ACCOUNT_NAME }}" >> .env
          echo "STORAGE_ACCOUNT_KEY=${{ secrets.STORAGE_KEY }}" >> .env
          docker-compose --env-file .env -f docker-compose-acr.yml build
          docker-compose --env-file .env -f docker-compose-acr.yml push

      - name: Docker logout
        if: always()
        run: docker logout ${{ secrets.ACR_NAME }}.azurecr.io
