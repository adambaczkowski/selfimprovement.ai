version: '3.7'

services:
  postgres:
    image: postgres:16
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"

  frontend:
    build:
      context: ./Source/Web/
      dockerfile: Dockerfile.local
    ports:
      - "3000:3000"
    restart: always

  identity:
    build:
      context: ./Source
      dockerfile: IdentityApi/Dockerfile.local
    environment:
      SelfImprovementDbContext: "Host=postgres;Port=5432;Database=${POSTGRES_DB};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true"
      CorsOrigin: "http://localhost:3000"
      BlobStorageConnectionUrl: "UseDevelopmentStorage=true;DevelopmentStorageProxyUri=${BLOB_STORAGE_CONNECTION_URL}"
    ports:
      - "8080:8080"

  goal:
    build:
      context: ./Source
      dockerfile: GoalApi/Dockerfile.local
    environment:
      SelfImprovementDbContext: "Host=postgres;Port=5432;Database=${POSTGRES_DB};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true"
      CorsOrigin: "http://localhost:3000"
    ports:
      - "8081:8080"
    restart: always

  prompt:
    build:
      context: ./Source
      dockerfile: PromptApi/Dockerfile.local
    environment:
      SelfImprovementDbContext: "Host=postgres;Port=5432;Database=${POSTGRES_DB};User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=true"
      CorsOrigin: "http://localhost:3000"
    ports:
      - "8082:8080"

  open-webui:
    build:
      context: ./Ollama
      dockerfile: Dockerfile
    ports:
      - "3001:8080"
    volumes:
      - open_webui_data:/app/backend/data

  ollama:
    tty: true
    image: ollama/ollama:latest
    ports:
      - 11434:11434
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama

  mailhog:
    build:
      context: ./Mail
      dockerfile: Dockerfile
    ports:
      - "1025:1025"
      - "8025:8025"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml
    volumes:
      - loki_data:/etc/loki

  promtail:
    image: grafana/promtail:latest
    command: -config.expand-env=true -config.file=/etc/promtail/promtail-config.yml
    volumes:
      - promtail_data:/etc/promtail

  prometheus:
    image: prom/prometheus:v2.51.2
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
    volumes:
      - prometheus_data:/prometheus

  node-exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"

  rabbitmq:
    image: rabbitmq:3.9.9-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./Nginx/index.html:/usr/share/nginx/html/index.html

volumes:
  postgres_data:
  ollama_data:
  open_webui_data:
  rabbitmq_data:
  grafana_data:
  prometheus_data:
  loki_data:
  promtail_data:
